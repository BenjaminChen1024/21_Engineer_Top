<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [21_Engineer\21_Engineer.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image 21_Engineer\21_Engineer.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Jun 11 03:55:55 2022
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7b]">&lang;Func5&rang;</a> from service_motor.o(i.<Func5>) referenced from service_motor.o(i.__sti___17_Service_Motor_cpp_2a606558)
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[27]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX1_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[26]">CAN1_TX_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_TX_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[51]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[52]">CAN2_RX1_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_RX1_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[53]">CAN2_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[50]">CAN2_TX_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_TX_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream2_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream4_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream5_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream5_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream7_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[43]">FMC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[60]">FPU_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[77]">Get_SystemTimer</a> from drv_timer.o(i.Get_SystemTimer) referenced from service_motor.o(i._ZN14Motor_Classdef12MotorPIDInitEv)
 <LI><a href="#[5f]">HASH_RNG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5a]">I2C3_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[59]">I2C3_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[54]">OTG_FS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3d]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5b]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3c]">RTC_Alarm_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[16]">RTC_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[44]">SDIO_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7e]">StartDefaultTask</a> from main.o(i.StartDefaultTask) referenced from main.o(.constdata)
 <LI><a href="#[12]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[62]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[15]">TAMP_STAMP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from stm32f4xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[45]">TIM5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[49]">TIM6_DAC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4a]">TIM7_IRQHandler</a> from stm32f4xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[47]">UART4_IRQHandler</a> from stm32f4xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[48]">UART5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[58]">USART6_IRQHandler</a> from stm32f4xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[72]">Action_Ctrl(void*)</a> from system_tasks.o(i._Z11Action_CtrlPv) referenced from system_tasks.o(i.System_Tasks_Init)
 <LI><a href="#[75]">Offline_Ctrl(void*)</a> from system_tasks.o(i._Z12Offline_CtrlPv) referenced from system_tasks.o(i.System_Tasks_Init)
 <LI><a href="#[76]">System_Reset(void*)</a> from system_tasks.o(i._Z12System_ResetPv) referenced from system_tasks.o(i.System_Tasks_Init)
 <LI><a href="#[74]">Mode_Selection(void*)</a> from system_tasks.o(i._Z14Mode_SelectionPv) referenced from system_tasks.o(i.System_Tasks_Init)
 <LI><a href="#[6e]">User_CAN1_RxCpltCallback(CAN_RxMessage*)</a> from system_config.o(i._Z24User_CAN1_RxCpltCallbackP13CAN_RxMessage) referenced from system_config.o(i.System_Resource_Init)
 <LI><a href="#[6f]">User_CAN2_RxCpltCallback(CAN_RxMessage*)</a> from system_config.o(i._Z24User_CAN2_RxCpltCallbackP13CAN_RxMessage) referenced from system_config.o(i.System_Resource_Init)
 <LI><a href="#[69]">User_UART1_RxCpltCallback(unsigned char*, unsigned short)</a> from system_config.o(i._Z25User_UART1_RxCpltCallbackPht) referenced from system_config.o(i.System_Resource_Init)
 <LI><a href="#[6a]">User_UART2_RxCpltCallback(unsigned char*, unsigned short)</a> from system_config.o(i._Z25User_UART2_RxCpltCallbackPht) referenced from system_config.o(i.System_Resource_Init)
 <LI><a href="#[6b]">User_UART3_RxCpltCallback(unsigned char*, unsigned short)</a> from system_config.o(i._Z25User_UART3_RxCpltCallbackPht) referenced from system_config.o(i.System_Resource_Init)
 <LI><a href="#[6c]">User_UART4_RxCpltCallback(unsigned char*, unsigned short)</a> from system_config.o(i._Z25User_UART4_RxCpltCallbackPht) referenced from system_config.o(i.System_Resource_Init)
 <LI><a href="#[6d]">User_UART6_RxCpltCallback(unsigned char*, unsigned short)</a> from system_config.o(i._Z25User_UART6_RxCpltCallbackPht) referenced from system_config.o(i.System_Resource_Init)
 <LI><a href="#[71]">Top_Com(void*)</a> from system_tasks.o(i._Z7Top_ComPv) referenced from system_tasks.o(i.System_Tasks_Init)
 <LI><a href="#[70]">Top_POST(void*)</a> from system_tasks.o(i._Z8Top_POSTPv) referenced from system_tasks.o(i.System_Tasks_Init)
 <LI><a href="#[73]">Board_Com(void*)</a> from system_tasks.o(i._Z9Board_ComPv) referenced from system_tasks.o(i.System_Tasks_Init)
 <LI><a href="#[7f]">MotorSpeed::~MotorSpeed__sub_object()</a> from service_motor.o(i._ZN10MotorSpeedD2Ev) referenced from service_motor.o(.constdata__ZTV10MotorSpeed)
 <LI><a href="#[82]">Motor_C610::update(unsigned char*)</a> from service_motor.o(i._ZN10Motor_C6106updateEPh) referenced from service_motor.o(.constdata__ZTV10Motor_C610)
 <LI><a href="#[78]">Motor_C610::~Motor_C610()</a> from service_motor.o(i._ZN10Motor_C610D1Ev) referenced from service_motor.o(.constdata__ZTV10Motor_C610)
 <LI><a href="#[78]">Motor_C610::~Motor_C610()</a> from service_motor.o(i._ZN10Motor_C610D1Ev) referenced from service_motor.o(i.__sti___17_Service_Motor_cpp_2a606558)
 <LI><a href="#[83]">Motor_C620::update(unsigned char*)</a> from service_motor.o(i._ZN10Motor_C6206updateEPh) referenced from service_motor.o(.constdata__ZTV10Motor_C620)
 <LI><a href="#[79]">Motor_C620::~Motor_C620()</a> from service_motor.o(i._ZN10Motor_C620D1Ev) referenced from service_motor.o(.constdata__ZTV10Motor_C620)
 <LI><a href="#[79]">Motor_C620::~Motor_C620()</a> from service_motor.o(i._ZN10Motor_C620D1Ev) referenced from service_motor.o(i.__sti___17_Service_Motor_cpp_2a606558)
 <LI><a href="#[68]">[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f13UART_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[67]">[local to stm32f4xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_DMARxHalfCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[66]">[local to stm32f4xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f19UART_DMAReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[65]">[local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f20UART_DMAAbortOnErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[7a]">myPID::myPID()</a> from service_motor.o(i._ZN5myPIDC1Ev) referenced from service_motor.o(i.__sti___17_Service_Motor_cpp_2a606558)
 <LI><a href="#[64]">myPID::~myPID()</a> from service_motor.o(i._ZN5myPIDD1Ev) referenced from service_motor.o(i.<Func5>)
 <LI><a href="#[81]">MotorSpeed::getSpeed() const</a> from service_motor.o(i._ZNK10MotorSpeed8getSpeedEv) referenced from service_motor.o(.constdata__ZTV10MotorSpeed)
 <LI><a href="#[81]">MotorSpeed::getSpeed() const</a> from service_motor.o(i._ZNK10MotorSpeed8getSpeedEv) referenced from service_motor.o(.constdata__ZTV10Motor_C610)
 <LI><a href="#[81]">MotorSpeed::getSpeed() const</a> from service_motor.o(i._ZNK10MotorSpeed8getSpeedEv) referenced from service_motor.o(.constdata__ZTV10Motor_C620)
 <LI><a href="#[80]">MotorBase::ENCODER_ANGLE_RATIO() const</a> from service_motor.o(i._ZNK9MotorBase19ENCODER_ANGLE_RATIOEv) referenced from service_motor.o(.constdata__ZTV10MotorSpeed)
 <LI><a href="#[80]">MotorBase::ENCODER_ANGLE_RATIO() const</a> from service_motor.o(i._ZNK9MotorBase19ENCODER_ANGLE_RATIOEv) referenced from service_motor.o(.constdata__ZTV10Motor_C610)
 <LI><a href="#[80]">MotorBase::ENCODER_ANGLE_RATIO() const</a> from service_motor.o(i._ZNK9MotorBase19ENCODER_ANGLE_RATIOEv) referenced from service_motor.o(.constdata__ZTV10Motor_C620)
 <LI><a href="#[80]">MotorBase::ENCODER_ANGLE_RATIO() const</a> from service_motor.o(i._ZNK9MotorBase19ENCODER_ANGLE_RATIOEv) referenced from service_motor.o(.constdata__ZTV9MotorBase)
 <LI><a href="#[63]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[85]">__sti___17_Service_Motor_cpp_2a606558</a> from service_motor.o(i.__sti___17_Service_Motor_cpp_2a606558) referenced from service_motor.o(.init_array)
 <LI><a href="#[84]">__sti___19_System_Datapool_cpp_618cb3c9</a> from system_datapool.o(i.__sti___19_System_Datapool_cpp_618cb3c9) referenced from system_datapool.o(.init_array)
 <LI><a href="#[61]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7d]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[7c]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[63]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[1ea]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[87]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1eb]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[89]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1ec]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1ed]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1ee]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[8a]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1ef]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1e6]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1e5]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1df]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func5&rang;
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[1ba]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1f1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1f3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[86]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_Service_Motor_cpp_2a606558
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::Adjust()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_f2ulz</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ffixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Num_Judge()
</UL>

<P><STRONG><a name="[1b4]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::Adjust()
</UL>

<P><STRONG><a name="[1f4]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::Adjust()
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1f5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1f6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1f7]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[8b]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[99]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[98]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[88]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1f9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo1MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo1MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN1_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo1MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo1MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN2_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN2_RX1_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo1MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN2_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN2_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo1MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>CAN_Filter_Mask_Config</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, drv_can.o(i.CAN_Filter_Mask_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CAN_Filter_Mask_Config &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Resource_Init
</UL>

<P><STRONG><a name="[a3]"></a>CAN_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_Init &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Resource_Init
</UL>

<P><STRONG><a name="[a5]"></a>CANx_SendData</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, drv_can.o(i.CANx_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CANx_SendData &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Com(void*)
</UL>

<P><STRONG><a name="[1f]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[77]"></a>Get_SystemTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_timer.o(i.Get_SystemTimer))
<BR>[Address Reference Count : 1]<UL><LI> service_motor.o(i._ZN14Motor_Classdef12MotorPIDInitEv)
</UL>
<P><STRONG><a name="[a6]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::MotorMsgSend(__CAN_HandleTypeDef*, short*, int)
</UL>

<P><STRONG><a name="[a2]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 286 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Filter_Mask_Config
</UL>

<P><STRONG><a name="[b4]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[a0]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo1MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>HAL_CAN_Init</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[ae]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, drv_can.o(i.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, drv_can.o(i.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_RxFifo1MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_CAN_Start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>HAL_DMA_Abort</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[e7]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_dma_c]::DMA_CalcBaseAndBitshift(__DMA_HandleTypeDef*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_dma_c]::DMA_CheckFifoParam(__DMA_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[c1]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[b9]"></a>HAL_GPIO_Init</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[19d]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F8()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F7()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F6()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F5()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F4()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F3()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F2()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F1()
</UL>

<P><STRONG><a name="[f4]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Relay_Init()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::ETC_Back()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Rescue()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Loosen()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Pinch()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::ETC()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::SuperRescue_Back()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::SuperRescue()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Rescue_Back()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Relay_Reset()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Relay_Open()
</UL>

<P><STRONG><a name="[b7]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[e1]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[c3]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>HAL_InitTick</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c6]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[ba]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_cortex_c]::__NVIC_GetPriorityGrouping()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[c4]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12c]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Reset(void*)
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c7]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[cf]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[c8]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[d0]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[d1]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1152 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[10b]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d4]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_ITRx_SetConfig(TIM_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndTxTransfer(__UART_HandleTypeDef*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Rx_Idle_Callback
</UL>

<P><STRONG><a name="[e8]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[e5]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; [local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndTransmit_IT(__UART_HandleTypeDef*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(__UART_HandleTypeDef*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_Transmit_IT(__UART_HandleTypeDef*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_UART_MspInit</STRONG> (Thumb, 1252 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ef]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Rx_Idle_Callback
</UL>

<P><STRONG><a name="[1af]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndTransmit_IT(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[151]"></a>Relay_Delay</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, service_relay.o(i.Relay_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Turn_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[7e]"></a>StartDefaultTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = StartDefaultTask &rArr; System_Tasks_Init &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Tasks_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>SystemClock_Config</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>SystemInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[100]"></a>System_Resource_Init</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, system_config.o(i.System_Resource_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = System_Resource_Init &rArr; Uart_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Relay_Init()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::MotorPIDInit()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Filter_Mask_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>System_Tasks_Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, system_tasks.o(i.System_Tasks_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = System_Tasks_Init &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_SystemTick
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM7_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[d5]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[101]"></a>Timer_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_timer.o(i.Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Resource_Init
</UL>

<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART4_IRQHandler &rArr; Uart_Receive_Handler &rArr; Uart_Rx_Idle_Callback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Receive_Handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART1_IRQHandler &rArr; Uart_Receive_Handler &rArr; Uart_Rx_Idle_Callback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Receive_Handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART2_IRQHandler &rArr; Uart_Receive_Handler &rArr; Uart_Rx_Idle_Callback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Receive_Handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART3_IRQHandler &rArr; Uart_Receive_Handler &rArr; Uart_Rx_Idle_Callback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Receive_Handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>USART6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART6_IRQHandler &rArr; Uart_Receive_Handler &rArr; Uart_Rx_Idle_Callback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Receive_Handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>Uart_Init</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, drv_uart.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Uart_Init &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Resource_Init
</UL>

<P><STRONG><a name="[10c]"></a>Uart_Receive_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_uart.o(i.Uart_Receive_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Uart_Receive_Handler &rArr; Uart_Rx_Idle_Callback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Rx_Idle_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>Update_SystemTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_timer.o(i.Update_SystemTick))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>IsKeyPress(int)</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, service_communication.o(i._Z10IsKeyPressi))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFlag_judge(int)
</UL>

<P><STRONG><a name="[72]"></a>Action_Ctrl(void*)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, system_tasks.o(i._Z11Action_CtrlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Action_Ctrl(void*) &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Action()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Task()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_tasks.o(i.System_Tasks_Init)
</UL>
<P><STRONG><a name="[114]"></a>Key_Control()</STRONG> (Thumb, 970 bytes, Stack size 8 bytes, service_communication.o(i._Z11Key_Controlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_Control() &rArr; Turn_Motor_Classdef::Turn_to_QR(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Protect_ALL()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Life()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_to_QR(unsigned char)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_SuperRescue_Action()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rescue_Action()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Init_Part()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Pinch_Action()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Init_All()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_ETC_Action()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Relay_Reset()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Relay_Open()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox_Start()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain_Start()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox_Start()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox_Middle()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox_Start()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox_Start()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox_Start()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Reset()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFlag_judge(int)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_KeyFlag()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyPress(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Selection(void*)
</UL>

<P><STRONG><a name="[115]"></a>Set_KeyFlag()</STRONG> (Thumb, 564 bytes, Stack size 4 bytes, service_communication.o(i._Z11Set_KeyFlagv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_KeyFlag() &rArr; KeyFlag_judge(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFlag_judge(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Key_Control()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[75]"></a>Offline_Ctrl(void*)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, system_tasks.o(i._Z12Offline_CtrlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Offline_Ctrl(void*) &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Protect_ALL()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_tasks.o(i.System_Tasks_Init)
</UL>
<P><STRONG><a name="[76]"></a>System_Reset(void*)</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, system_tasks.o(i._Z12System_ResetPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = System_Reset(void*) &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Protect_ALL()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_tasks.o(i.System_Tasks_Init)
</UL>
<P><STRONG><a name="[11f]"></a>KeyFlag_judge(int)</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, service_communication.o(i._Z13KeyFlag_judgei))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = KeyFlag_judge(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyPress(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Key_Control()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_KeyFlag()
</UL>

<P><STRONG><a name="[74]"></a>Mode_Selection(void*)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, system_tasks.o(i._Z14Mode_SelectionPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Mode_Selection(void*) &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Key_Control()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_tasks.o(i.System_Tasks_Init)
</UL>
<P><STRONG><a name="[132]"></a>Update_USART_Board(unsigned char*, unsigned char)</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, service_communication.o(i._Z18Update_USART_BoardPhh))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_UART6_RxCpltCallback(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[12e]"></a>Protect_Key_Control()</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, service_communication.o(i._Z19Protect_Key_Controlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Protect_Key_Control() &rArr; Lift_Motor_Classdef::Lift_Adjust(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Adjust(unsigned char, unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFlag_judge(int)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_KeyFlag()
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Selection(void*)
</UL>

<P><STRONG><a name="[6e]"></a>User_CAN1_RxCpltCallback(CAN_RxMessage*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_config.o(i._Z24User_CAN1_RxCpltCallbackP13CAN_RxMessage))
<BR>[Address Reference Count : 1]<UL><LI> system_config.o(i.System_Resource_Init)
</UL>
<P><STRONG><a name="[6f]"></a>User_CAN2_RxCpltCallback(CAN_RxMessage*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, system_config.o(i._Z24User_CAN2_RxCpltCallbackP13CAN_RxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = User_CAN2_RxCpltCallback(CAN_RxMessage*) &rArr; Motor_Classdef::Update_Motor(unsigned char*, unsigned) &rArr; Motor_C620::update(unsigned char*) &rArr; MotorBase::update_angle(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::Update_Motor(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_config.o(i.System_Resource_Init)
</UL>
<P><STRONG><a name="[69]"></a>User_UART1_RxCpltCallback(unsigned char*, unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_config.o(i._Z25User_UART1_RxCpltCallbackPht))
<BR>[Address Reference Count : 1]<UL><LI> system_config.o(i.System_Resource_Init)
</UL>
<P><STRONG><a name="[6a]"></a>User_UART2_RxCpltCallback(unsigned char*, unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_config.o(i._Z25User_UART2_RxCpltCallbackPht))
<BR>[Address Reference Count : 1]<UL><LI> system_config.o(i.System_Resource_Init)
</UL>
<P><STRONG><a name="[6b]"></a>User_UART3_RxCpltCallback(unsigned char*, unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_config.o(i._Z25User_UART3_RxCpltCallbackPht))
<BR>[Address Reference Count : 1]<UL><LI> system_config.o(i.System_Resource_Init)
</UL>
<P><STRONG><a name="[6c]"></a>User_UART4_RxCpltCallback(unsigned char*, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, system_config.o(i._Z25User_UART4_RxCpltCallbackPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = User_UART4_RxCpltCallback(unsigned char*, unsigned short) &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_config.o(i.System_Resource_Init)
</UL>
<P><STRONG><a name="[6d]"></a>User_UART6_RxCpltCallback(unsigned char*, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, system_config.o(i._Z25User_UART6_RxCpltCallbackPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = User_UART6_RxCpltCallback(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_USART_Board(unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_config.o(i.System_Resource_Init)
</UL>
<P><STRONG><a name="[71]"></a>Top_Com(void*)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, system_tasks.o(i._Z7Top_ComPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Top_Com(void*) &rArr; Motor_Classdef::Motor_Control() &rArr; Motor_Classdef::MotorPID_Control() &rArr; myPID::Adjust() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_Updata()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::Motor_Control()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_tasks.o(i.System_Tasks_Init)
</UL>
<P><STRONG><a name="[70]"></a>Top_POST(void*)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, system_tasks.o(i._Z8Top_POSTPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Top_POST(void*) &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_POST_Reset()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_tasks.o(i.System_Tasks_Init)
</UL>
<P><STRONG><a name="[73]"></a>Board_Com(void*)</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, system_tasks.o(i._Z9Board_ComPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Board_Com(void*) &rArr; UIMsgSend() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIMsgSend()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANx_SendData
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_tasks.o(i.System_Tasks_Init)
</UL>
<P><STRONG><a name="[136]"></a>UIMsgSend()</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, service_communication.o(i._Z9UIMsgSendv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UIMsgSend() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Status_Judge()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Com(void*)
</UL>

<P><STRONG><a name="[13b]"></a>MotorSpeed::update_speed(unsigned char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, service_motor.o(i._ZN10MotorSpeed12update_speedEPh))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_C620::update(unsigned char*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_C610::update(unsigned char*)
</UL>

<P><STRONG><a name="[13d]"></a>MotorSpeed::MotorSpeed__sub_object(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, service_motor.o(i._ZN10MotorSpeedC2Eh))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_C620::Motor_C620(unsigned char)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_C610::Motor_C610(unsigned char)
</UL>

<P><STRONG><a name="[1fd]"></a>MotorSpeed::~MotorSpeed()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, service_motor.o(i._ZN10MotorSpeedD2Ev), UNUSED)

<P><STRONG><a name="[7f]"></a>MotorSpeed::~MotorSpeed__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, service_motor.o(i._ZN10MotorSpeedD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_C620::~Motor_C620()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_C610::~Motor_C610()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> service_motor.o(.constdata__ZTV10MotorSpeed)
</UL>
<P><STRONG><a name="[82]"></a>Motor_C610::update(unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, service_motor.o(i._ZN10Motor_C6106updateEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_C610::update(unsigned char*) &rArr; MotorBase::update_angle(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorBase::update_angle(unsigned char*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed::update_speed(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::Update_Motor(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> service_motor.o(.constdata__ZTV10Motor_C610)
</UL>
<P><STRONG><a name="[13c]"></a>Motor_C610::Motor_C610(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, service_motor.o(i._ZN10Motor_C610C1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_C610::Motor_C610(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed::MotorSpeed__sub_object(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_Service_Motor_cpp_2a606558
</UL>

<P><STRONG><a name="[1fe]"></a>Motor_C610::Motor_C610__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, service_motor.o(i._ZN10Motor_C610C1Eh), UNUSED)

<P><STRONG><a name="[78]"></a>Motor_C610::~Motor_C610()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, service_motor.o(i._ZN10Motor_C610D1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_C610::~Motor_C610()
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed::~MotorSpeed__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> service_motor.o(i.__sti___17_Service_Motor_cpp_2a606558)
<LI> service_motor.o(.constdata__ZTV10Motor_C610)
</UL>
<P><STRONG><a name="[1ff]"></a>Motor_C610::~Motor_C610__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, service_motor.o(i._ZN10Motor_C610D1Ev), UNUSED)

<P><STRONG><a name="[83]"></a>Motor_C620::update(unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, service_motor.o(i._ZN10Motor_C6206updateEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_C620::update(unsigned char*) &rArr; MotorBase::update_angle(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorBase::update_angle(unsigned char*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed::update_speed(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::Update_Motor(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> service_motor.o(.constdata__ZTV10Motor_C620)
</UL>
<P><STRONG><a name="[13e]"></a>Motor_C620::Motor_C620(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, service_motor.o(i._ZN10Motor_C620C1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_C620::Motor_C620(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed::MotorSpeed__sub_object(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_Service_Motor_cpp_2a606558
</UL>

<P><STRONG><a name="[200]"></a>Motor_C620::Motor_C620__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, service_motor.o(i._ZN10Motor_C620C1Eh), UNUSED)

<P><STRONG><a name="[79]"></a>Motor_C620::~Motor_C620()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, service_motor.o(i._ZN10Motor_C620D1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_C620::~Motor_C620()
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed::~MotorSpeed__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> service_motor.o(i.__sti___17_Service_Motor_cpp_2a606558)
<LI> service_motor.o(.constdata__ZTV10Motor_C620)
</UL>
<P><STRONG><a name="[201]"></a>Motor_C620::~Motor_C620__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, service_motor.o(i._ZN10Motor_C620D1Ev), UNUSED)

<P><STRONG><a name="[1b2]"></a>myPIDTimer::UpdataTimeStamp()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, pid.o(i._ZN10myPIDTimer15UpdataTimeStampEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = myPIDTimer::UpdataTimeStamp()
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::Adjust()
</UL>

<P><STRONG><a name="[17e]"></a>myPIDTimer::getMicroTick_regist(unsigned(*)())</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pid.o(i._ZN10myPIDTimer19getMicroTick_registEPFjvE))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::MotorPIDInit()
</UL>

<P><STRONG><a name="[13f]"></a>Box_Classdef::Box_Num_Judge()</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, system_datapool.o(i._ZN12Box_Classdef13Box_Num_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Box_Classdef::Box_Num_Judge() &rArr; Lift_Motor_Classdef::Lift_Third_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Third_Judge()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_None_Judge()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Height_Judge()
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[140]"></a>Box_Classdef::Box_Height_Judge()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_datapool.o(i._ZN12Box_Classdef16Box_Height_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Box_Classdef::Box_Height_Judge()
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Num_Judge()
</UL>

<P><STRONG><a name="[162]"></a>Box_Classdef::Box_Reset()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_datapool.o(i._ZN12Box_Classdef9Box_ResetEv))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[129]"></a>Auto_Classdef::Auto_Reset()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, service_auto.o(i._ZN13Auto_Classdef10Auto_ResetEv))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Protect_ALL()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Init_All()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[143]"></a>Auto_Classdef::Auto_REBigBox()</STRONG> (Thumb, 1190 bytes, Stack size 8 bytes, service_auto.o(i._ZN13Auto_Classdef13Auto_REBigBoxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Auto_Classdef::Auto_REBigBox() &rArr; Box_Classdef::Box_Num_Judge() &rArr; Lift_Motor_Classdef::Lift_Third_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Reset()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Num_Judge()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Start_Judge()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Back_Start()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top_Judge()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Hor_Judge()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Exchange()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Hor()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Second_Stage_Extension()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Second_Judge()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_None_Judge()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Mini_Judge()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::None_Extension()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Mini_Extension()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Death()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::None_Lift()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Stop()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Vision_BigBox_Judge()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Exchange_Box_Judge()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Take_BigBox_Judge()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Vision_BigBox_Lift()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Exchange_Box_Lift()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Third_Stage_Lift()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Take_BigBox_Lift()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_First_Judge()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::First_Stage_Lift()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Loosen()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Pinch()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Delay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Life()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_to_QR(unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Reset()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Topper_Judge()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Topper()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Negative_Judge()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Negative_Extension()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Exchange_Judge()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Task()
</UL>

<P><STRONG><a name="[166]"></a>Auto_Classdef::Auto_RobBigBox()</STRONG> (Thumb, 894 bytes, Stack size 8 bytes, service_auto.o(i._ZN13Auto_Classdef14Auto_RobBigBoxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Auto_Classdef::Auto_RobBigBox() &rArr; Box_Classdef::Box_Num_Judge() &rArr; Lift_Motor_Classdef::Lift_Third_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Num_Judge()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Start_Judge()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Back_Start()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top_Judge()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Hor_Judge()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Hor()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Second_Stage_Extension()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Second_Judge()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Mini_Judge()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::None_Extension()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Mini_Extension()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Death()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::None_Lift()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Stop()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Vision_BigBox_Judge()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Take_BigBox_Judge()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Vision_BigBox_Lift()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Third_Stage_Lift()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Take_BigBox_Lift()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_First_Judge()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::First_Stage_Lift()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Loosen()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Pinch()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Delay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Life()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Task()
</UL>

<P><STRONG><a name="[167]"></a>Auto_Classdef::Auto_ExchangeBox()</STRONG> (Thumb, 912 bytes, Stack size 8 bytes, service_auto.o(i._ZN13Auto_Classdef16Auto_ExchangeBoxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Auto_Classdef::Auto_ExchangeBox() &rArr; Box_Classdef::Box_Num_Judge() &rArr; Lift_Motor_Classdef::Lift_Third_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_None_Judge()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Reset()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Num_Judge()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Start_Judge()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Back_Start()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top_Judge()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Exchange()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_None_Judge()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::None_Extension()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Death()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::None_Lift()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Stop()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Exchange_Box_Judge()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Second_Stage_Lift()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Second_Judge()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Exchange_Box_Lift()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Third_Stage_Lift()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Loosen()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Pinch()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Delay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Life()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_to_QR(unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Reset()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Push()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Third_Stage_Extension()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Negative_Judge()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Negative_Extension()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Third_Judge()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Exchange_Judge()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Task()
</UL>

<P><STRONG><a name="[138]"></a>Auto_Classdef::Auto_Status_Judge()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, service_auto.o(i._ZN13Auto_Classdef17Auto_Status_JudgeEv))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIMsgSend()
</UL>

<P><STRONG><a name="[16d]"></a>Auto_Classdef::Auto_TakeSmallBox()</STRONG> (Thumb, 762 bytes, Stack size 8 bytes, service_auto.o(i._ZN13Auto_Classdef17Auto_TakeSmallBoxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Auto_Classdef::Auto_TakeSmallBox() &rArr; Box_Classdef::Box_Num_Judge() &rArr; Lift_Motor_Classdef::Lift_Third_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Reset()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Num_Judge()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Start_Judge()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Back_Start()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top_Judge()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Mini_Judge()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::None_Extension()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Mini_Extension()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Death()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::None_Lift()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Stop()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Take_SmallBox_Judge()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Take_BigBox_Judge()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Take_SmallBox_Lift()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Third_Stage_Lift()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Take_BigBox_Lift()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_First_Judge()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::First_Stage_Lift()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Loosen()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Pinch()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Delay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Life()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Reset()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_SmallBox_Judge()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_SmallBox()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Task()
</UL>

<P><STRONG><a name="[172]"></a>Auto_Classdef::Auto_ExchangeAgain()</STRONG> (Thumb, 774 bytes, Stack size 8 bytes, service_auto.o(i._ZN13Auto_Classdef18Auto_ExchangeAgainEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Auto_Classdef::Auto_ExchangeAgain() &rArr; Box_Classdef::Box_Num_Judge() &rArr; Lift_Motor_Classdef::Lift_Third_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Reset()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Num_Judge()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Start_Judge()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Back_Start()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top_Judge()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Exchange()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_None_Judge()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::None_Extension()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Death()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::None_Lift()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Stop()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Exchange_Box_Judge()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Exchange_Box_Lift()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Third_Stage_Lift()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Loosen()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Pinch()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Delay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Life()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_to_QR(unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Reset()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_ExchangeAgain_Judge()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_ExchangeAgain()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Push()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Third_Stage_Extension()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Negative_Judge()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Negative_Extension()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Third_Judge()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Exchange_Judge()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Task()
</UL>

<P><STRONG><a name="[175]"></a>Auto_Classdef::Auto_TakeGroundBox()</STRONG> (Thumb, 1042 bytes, Stack size 8 bytes, service_auto.o(i._ZN13Auto_Classdef18Auto_TakeGroundBoxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Auto_Classdef::Auto_TakeGroundBox() &rArr; Box_Classdef::Box_Num_Judge() &rArr; Lift_Motor_Classdef::Lift_Third_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Reset()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Num_Judge()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Start_Judge()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Limit_Judge()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Back_Start()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top_Judge()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Exchange()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Limit()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Second_Stage_Extension()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Second_Judge()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_None_Judge()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Mini_Judge()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::None_Extension()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Mini_Extension()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Death()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::None_Lift()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Stop()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Exchange_Box_Judge()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Take_BigBox_Judge()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Exchange_Box_Lift()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Third_Stage_Lift()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Take_BigBox_Lift()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_First_Judge()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::First_Stage_Lift()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Loosen()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Pinch()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Delay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Life()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_to_QR(unsigned char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Reset()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Topper_Judge()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Topper()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Negative_Judge()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Negative_Extension()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Negative_Judge()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Negative_Lift()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Exchange_Judge()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Task()
</UL>

<P><STRONG><a name="[192]"></a>Auto_Classdef::Auto_Waiting_Judge()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, service_auto.o(i._ZN13Auto_Classdef18Auto_Waiting_JudgeEv))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Init_Part()
</UL>

<P><STRONG><a name="[118]"></a>Auto_Classdef::Auto_REBigBox_Start()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, service_auto.o(i._ZN13Auto_Classdef19Auto_REBigBox_StartEv))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[11a]"></a>Auto_Classdef::Auto_RobBigBox_Start()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, service_auto.o(i._ZN13Auto_Classdef20Auto_RobBigBox_StartEv))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[11c]"></a>Auto_Classdef::Auto_ExchangeBox_Start()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, service_auto.o(i._ZN13Auto_Classdef22Auto_ExchangeBox_StartEv))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[11d]"></a>Auto_Classdef::Auto_ExchangeBox_Middle()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, service_auto.o(i._ZN13Auto_Classdef23Auto_ExchangeBox_MiddleEv))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[11b]"></a>Auto_Classdef::Auto_TakeSmallBox_Start()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, service_auto.o(i._ZN13Auto_Classdef23Auto_TakeSmallBox_StartEv))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[127]"></a>Auto_Classdef::Auto_ExchangeAgain_Start()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, service_auto.o(i._ZN13Auto_Classdef24Auto_ExchangeAgain_StartEv))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[119]"></a>Auto_Classdef::Auto_TakeGroundBox_Start()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, service_auto.o(i._ZN13Auto_Classdef24Auto_TakeGroundBox_StartEv))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[111]"></a>Auto_Classdef::Auto_Task()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, service_auto.o(i._ZN13Auto_Classdef9Auto_TaskEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Auto_Classdef::Auto_Task() &rArr; Auto_Classdef::Auto_TakeGroundBox() &rArr; Box_Classdef::Box_Num_Judge() &rArr; Lift_Motor_Classdef::Lift_Third_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Ctrl(void*)
</UL>

<P><STRONG><a name="[1b9]"></a>DR16_Classdef::DR16_Classdef()</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, dr16.o(i._ZN13DR16_ClassdefC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_System_Datapool_cpp_618cb3c9
</UL>

<P><STRONG><a name="[202]"></a>DR16_Classdef::DR16_Classdef__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dr16.o(i._ZN13DR16_ClassdefC1Ev), UNUSED)

<P><STRONG><a name="[17a]"></a>LowPassFilter::f(float)</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, filters.o(i._ZN13LowPassFilter1fEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LowPassFilter::f(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::out()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::in(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::Adjust()
</UL>

<P><STRONG><a name="[17b]"></a>LowPassFilter::in(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, filters.o(i._ZN13LowPassFilter2inEf))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::f(float)
</UL>

<P><STRONG><a name="[17c]"></a>LowPassFilter::out()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, filters.o(i._ZN13LowPassFilter3outEv))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::f(float)
</UL>

<P><STRONG><a name="[1b7]"></a>LowPassFilter::LowPassFilter(float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, service_motor.o(i._ZN13LowPassFilterC1Ef))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::myPID()
</UL>

<P><STRONG><a name="[203]"></a>LowPassFilter::LowPassFilter__sub_object(float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, service_motor.o(i._ZN13LowPassFilterC1Ef), UNUSED)

<P><STRONG><a name="[17d]"></a>Motor_Classdef::MotorMsgSend(__CAN_HandleTypeDef*, short*, int)</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, service_motor.o(i._ZN14Motor_Classdef12MotorMsgSendEP19__CAN_HandleTypeDefPsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Motor_Classdef::MotorMsgSend(__CAN_HandleTypeDef*, short*, int) &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::Motor_Control()
</UL>

<P><STRONG><a name="[104]"></a>Motor_Classdef::MotorPIDInit()</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, service_motor.o(i._ZN14Motor_Classdef12MotorPIDInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_Classdef::MotorPIDInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPIDTimer::getMicroTick_regist(unsigned(*)())
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::SetPIDParam(float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Resource_Init
</UL>

<P><STRONG><a name="[130]"></a>Motor_Classdef::Update_Motor(unsigned char*, unsigned)</STRONG> (Thumb, 462 bytes, Stack size 16 bytes, service_motor.o(i._ZN14Motor_Classdef12Update_MotorEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Motor_Classdef::Update_Motor(unsigned char*, unsigned) &rArr; Motor_C620::update(unsigned char*) &rArr; MotorBase::update_angle(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_C620::getGivenCurrent() const
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSpeed::getSpeed() const
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_C620::update(unsigned char*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_C610::update(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_CAN2_RxCpltCallback(CAN_RxMessage*)
</UL>

<P><STRONG><a name="[134]"></a>Motor_Classdef::Motor_Control()</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, service_motor.o(i._ZN14Motor_Classdef13Motor_ControlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Motor_Classdef::Motor_Control() &rArr; Motor_Classdef::MotorPID_Control() &rArr; myPID::Adjust() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::MotorPID_Control()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::MotorMsgSend(__CAN_HandleTypeDef*, short*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_Com(void*)
</UL>

<P><STRONG><a name="[181]"></a>Motor_Classdef::MotorPID_Control()</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, service_motor.o(i._ZN14Motor_Classdef16MotorPID_ControlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Motor_Classdef::MotorPID_Control() &rArr; myPID::Adjust() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::Adjust()
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::Motor_Control()
</UL>

<P><STRONG><a name="[183]"></a>Motor_Classdef::Motor_Classdef()</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, system_datapool.o(i._ZN14Motor_ClassdefC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_Classdef::Motor_Classdef()
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Motor_Classdef()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Motor_Classdef()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_System_Datapool_cpp_618cb3c9
</UL>

<P><STRONG><a name="[204]"></a>Motor_Classdef::Motor_Classdef__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, system_datapool.o(i._ZN14Motor_ClassdefC1Ev), UNUSED)

<P><STRONG><a name="[105]"></a>Relay_Classdef::Relay_Init()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, service_relay.o(i._ZN14Relay_Classdef10Relay_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay_Classdef::Relay_Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Resource_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Init_All()
</UL>

<P><STRONG><a name="[122]"></a>Relay_Classdef::Relay_Open()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, service_relay.o(i._ZN14Relay_Classdef10Relay_OpenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay_Classdef::Relay_Open()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[124]"></a>Relay_Classdef::Relay_Reset()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, service_relay.o(i._ZN14Relay_Classdef11Relay_ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay_Classdef::Relay_Reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Init_Part()
</UL>

<P><STRONG><a name="[186]"></a>Relay_Classdef::Rescue_Back()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_relay.o(i._ZN14Relay_Classdef11Rescue_BackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay_Classdef::Rescue_Back()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rescue_Action()
</UL>

<P><STRONG><a name="[187]"></a>Relay_Classdef::SuperRescue()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_relay.o(i._ZN14Relay_Classdef11SuperRescueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay_Classdef::SuperRescue()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_SuperRescue_Action()
</UL>

<P><STRONG><a name="[188]"></a>Relay_Classdef::SuperRescue_Back()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_relay.o(i._ZN14Relay_Classdef16SuperRescue_BackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay_Classdef::SuperRescue_Back()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_SuperRescue_Action()
</UL>

<P><STRONG><a name="[189]"></a>Relay_Classdef::ETC()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_relay.o(i._ZN14Relay_Classdef3ETCEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay_Classdef::ETC()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_ETC_Action()
</UL>

<P><STRONG><a name="[14f]"></a>Relay_Classdef::Pinch()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_relay.o(i._ZN14Relay_Classdef5PinchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay_Classdef::Pinch()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Pinch_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[144]"></a>Relay_Classdef::Loosen()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_relay.o(i._ZN14Relay_Classdef6LoosenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay_Classdef::Loosen()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Extend_Action()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Pinch_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[18a]"></a>Relay_Classdef::Rescue()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_relay.o(i._ZN14Relay_Classdef6RescueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay_Classdef::Rescue()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rescue_Action()
</UL>

<P><STRONG><a name="[18b]"></a>Relay_Classdef::ETC_Back()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_relay.o(i._ZN14Relay_Classdef8ETC_BackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay_Classdef::ETC_Back()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_ETC_Action()
</UL>

<P><STRONG><a name="[191]"></a>Action_Classdef::Action_Reset()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, service_action.o(i._ZN15Action_Classdef12Action_ResetEv))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Protect_ALL()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Init_Part()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Init_All()
</UL>

<P><STRONG><a name="[121]"></a>Action_Classdef::Do_ETC_Action()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, service_action.o(i._ZN15Action_Classdef13Do_ETC_ActionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Action_Classdef::Do_ETC_Action() &rArr; Relay_Classdef::ETC_Back()
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::ETC_Back()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::ETC()
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[18c]"></a>Action_Classdef::Do_Lift_Action()</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, service_action.o(i._ZN15Action_Classdef14Do_Lift_ActionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Action_Classdef::Do_Lift_Action() &rArr; Lift_Motor_Classdef::Lift_POST() &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Third_Judge()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_None_Judge()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Num_Judge()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::None_Lift()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Stop()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_POST()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Vision_BigBox_Judge()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Take_SmallBox_Judge()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Exchange_Box_Judge()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Take_BigBox_Judge()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Vision_BigBox_Lift()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Take_SmallBox_Lift()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Test_jl_Judge()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Second_Stage_Lift()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Second_Judge()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Exchange_Box_Lift()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Third_Stage_Lift()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Take_BigBox_Lift()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_First_Judge()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::First_Stage_Lift()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Test_jl_Lift()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Loosen()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Action()
</UL>

<P><STRONG><a name="[190]"></a>Action_Classdef::Do_Turn_Action()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, service_action.o(i._ZN15Action_Classdef14Do_Turn_ActionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Action_Classdef::Do_Turn_Action() &rArr; Turn_Motor_Classdef::Turn_to_QR(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Delay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_to_QR(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Action()
</UL>

<P><STRONG><a name="[12a]"></a>Action_Classdef::Action_Init_All()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, service_action.o(i._ZN15Action_Classdef15Action_Init_AllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Action_Classdef::Action_Init_All() &rArr; Relay_Classdef::Relay_Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Relay_Init()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Death()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Reset()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[123]"></a>Action_Classdef::Do_Pinch_Action()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, service_action.o(i._ZN15Action_Classdef15Do_Pinch_ActionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Action_Classdef::Do_Pinch_Action() &rArr; Relay_Classdef::Loosen()
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Loosen()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Pinch()
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[128]"></a>Action_Classdef::Action_Init_Part()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, service_action.o(i._ZN15Action_Classdef16Action_Init_PartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Action_Classdef::Action_Init_Part() &rArr; Turn_Motor_Classdef::Turn_Death()
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Death()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Waiting_Judge()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Reset()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Relay_Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[193]"></a>Action_Classdef::Do_Extend_Action()</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, service_action.o(i._ZN15Action_Classdef16Do_Extend_ActionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Action_Classdef::Do_Extend_Action() &rArr; Extend_Motor_Classdef::Second_Stage_Extension() &rArr; Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Second_Stage_Extension()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::First_Stage_Extension()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Second_Judge()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_First_Judge()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_None_Judge()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Mini_Judge()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::None_Extension()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Mini_Extension()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_POST()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Loosen()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Action()
</UL>

<P><STRONG><a name="[126]"></a>Action_Classdef::Do_Rescue_Action()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, service_action.o(i._ZN15Action_Classdef16Do_Rescue_ActionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Action_Classdef::Do_Rescue_Action() &rArr; Relay_Classdef::Rescue()
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Rescue()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Rescue_Back()
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[197]"></a>Action_Classdef::Do_Rotate_Action()</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, service_action.o(i._ZN15Action_Classdef16Do_Rotate_ActionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Action_Classdef::Do_Rotate_Action() &rArr; Rotate_Motor_Classdef::Rotate_Exchange() &rArr; Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Start_Judge()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Limit_Judge()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Back_Start()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top_Judge()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Hor_Judge()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Exchange()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Limit()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_POST()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Hor()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Second_Stage_Extension()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_None_Judge()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Mini_Judge()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::Loosen()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Exchange_Judge()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Action()
</UL>

<P><STRONG><a name="[117]"></a>Action_Classdef::Action_Protect_ALL()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, service_action.o(i._ZN15Action_Classdef18Action_Protect_ALLEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Action_Classdef::Action_Protect_ALL()
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Stop()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Stop()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Stop()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Stop()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Reset()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Reset(void*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offline_Ctrl(void*)
</UL>

<P><STRONG><a name="[125]"></a>Action_Classdef::Do_SuperRescue_Action()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, service_action.o(i._ZN15Action_Classdef21Do_SuperRescue_ActionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Action_Classdef::Do_SuperRescue_Action() &rArr; Relay_Classdef::SuperRescue_Back()
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::SuperRescue_Back()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Classdef::SuperRescue()
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
</UL>

<P><STRONG><a name="[112]"></a>Action_Classdef::Do_Action()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, service_action.o(i._ZN15Action_Classdef9Do_ActionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Action_Classdef::Do_Action() &rArr; Action_Classdef::Do_Lift_Action() &rArr; Lift_Motor_Classdef::Lift_POST() &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Extend_Action()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Turn_Action()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Ctrl(void*)
</UL>

<P><STRONG><a name="[19c]"></a>Sensor_Classdef::PR_F1()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, service_sensor.o(i._ZN15Sensor_Classdef5PR_F1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_Classdef::PR_F1()
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_Updata()
</UL>

<P><STRONG><a name="[19e]"></a>Sensor_Classdef::PR_F2()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, service_sensor.o(i._ZN15Sensor_Classdef5PR_F2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_Classdef::PR_F2()
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_Updata()
</UL>

<P><STRONG><a name="[19f]"></a>Sensor_Classdef::PR_F3()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, service_sensor.o(i._ZN15Sensor_Classdef5PR_F3Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_Classdef::PR_F3()
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_Updata()
</UL>

<P><STRONG><a name="[1a0]"></a>Sensor_Classdef::PR_F4()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, service_sensor.o(i._ZN15Sensor_Classdef5PR_F4Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_Classdef::PR_F4()
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_Updata()
</UL>

<P><STRONG><a name="[1a1]"></a>Sensor_Classdef::PR_F5()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, service_sensor.o(i._ZN15Sensor_Classdef5PR_F5Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_Classdef::PR_F5()
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_Updata()
</UL>

<P><STRONG><a name="[1a2]"></a>Sensor_Classdef::PR_F6()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, service_sensor.o(i._ZN15Sensor_Classdef5PR_F6Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_Classdef::PR_F6()
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_Updata()
</UL>

<P><STRONG><a name="[1a3]"></a>Sensor_Classdef::PR_F7()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, service_sensor.o(i._ZN15Sensor_Classdef5PR_F7Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_Classdef::PR_F7()
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_Updata()
</UL>

<P><STRONG><a name="[1a4]"></a>Sensor_Classdef::PR_F8()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, service_sensor.o(i._ZN15Sensor_Classdef5PR_F8Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_Classdef::PR_F8()
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_Updata()
</UL>

<P><STRONG><a name="[133]"></a>Sensor_Classdef::PR_Updata()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, service_sensor.o(i._ZN15Sensor_Classdef9PR_UpdataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sensor_Classdef::PR_Updata() &rArr; Sensor_Classdef::PR_F8()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F8()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F7()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F6()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F5()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F4()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F3()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F2()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_F1()
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_Com(void*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_POST()
</UL>

<P><STRONG><a name="[1a5]"></a>Lift_Motor_Classdef::Lift_Death()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef10Lift_DeathEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lift_Motor_Classdef::Lift_Death()
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::SetPIDParam(float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_POST()
</UL>

<P><STRONG><a name="[1a6]"></a>Lift_Motor_Classdef::Lift_Judge(float)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef10Lift_JudgeEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Third_Judge()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_None_Judge()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_POST_Reset()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Vision_BigBox_Judge()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Take_SmallBox_Judge()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Exchange_Box_Judge()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Take_BigBox_Judge()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Test_jl_Judge()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Second_Judge()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_First_Judge()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Negative_Judge()
</UL>

<P><STRONG><a name="[12f]"></a>Lift_Motor_Classdef::Lift_Adjust(unsigned char, unsigned char)</STRONG> (Thumb, 556 bytes, Stack size 16 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef11Lift_AdjustEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Lift_Motor_Classdef::Lift_Adjust(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 myConstrain&lang;float&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_Key_Control()
</UL>

<P><STRONG><a name="[18e]"></a>Lift_Motor_Classdef::Test_jl_Lift()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef12Test_jl_LiftEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lift_Motor_Classdef::Test_jl_Lift() &rArr; Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
</UL>

<P><STRONG><a name="[176]"></a>Lift_Motor_Classdef::Negative_Lift()</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef13Negative_LiftEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lift_Motor_Classdef::Negative_Lift()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 myConstrain&lang;float&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
</UL>

<P><STRONG><a name="[141]"></a>Lift_Motor_Classdef::Lift_None_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef15Lift_None_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lift_Motor_Classdef::Lift_None_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Num_Judge()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
</UL>

<P><STRONG><a name="[135]"></a>Lift_Motor_Classdef::Lift_POST_Reset()</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef15Lift_POST_ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lift_Motor_Classdef::Lift_POST_Reset() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Life()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_POST(void*)
</UL>

<P><STRONG><a name="[156]"></a>Lift_Motor_Classdef::First_Stage_Lift()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef16First_Stage_LiftEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lift_Motor_Classdef::First_Stage_Lift() &rArr; Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[157]"></a>Lift_Motor_Classdef::Lift_First_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef16Lift_First_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lift_Motor_Classdef::Lift_First_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[142]"></a>Lift_Motor_Classdef::Lift_Third_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef16Lift_Third_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lift_Motor_Classdef::Lift_Third_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Classdef::Box_Num_Judge()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
</UL>

<P><STRONG><a name="[147]"></a>Lift_Motor_Classdef::Take_BigBox_Lift()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef16Take_BigBox_LiftEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lift_Motor_Classdef::Take_BigBox_Lift() &rArr; Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[164]"></a>Lift_Motor_Classdef::Third_Stage_Lift()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef16Third_Stage_LiftEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lift_Motor_Classdef::Third_Stage_Lift() &rArr; Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[158]"></a>Lift_Motor_Classdef::Exchange_Box_Lift()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef17Exchange_Box_LiftEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lift_Motor_Classdef::Exchange_Box_Lift() &rArr; Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[169]"></a>Lift_Motor_Classdef::Lift_Second_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef17Lift_Second_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lift_Motor_Classdef::Lift_Second_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
</UL>

<P><STRONG><a name="[168]"></a>Lift_Motor_Classdef::Second_Stage_Lift()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef17Second_Stage_LiftEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lift_Motor_Classdef::Second_Stage_Lift() &rArr; Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
</UL>

<P><STRONG><a name="[18f]"></a>Lift_Motor_Classdef::Lift_Test_jl_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef18Lift_Test_jl_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lift_Motor_Classdef::Lift_Test_jl_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
</UL>

<P><STRONG><a name="[16e]"></a>Lift_Motor_Classdef::Take_SmallBox_Lift()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef18Take_SmallBox_LiftEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lift_Motor_Classdef::Take_SmallBox_Lift() &rArr; Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
</UL>

<P><STRONG><a name="[145]"></a>Lift_Motor_Classdef::Vision_BigBox_Lift()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef18Vision_BigBox_LiftEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lift_Motor_Classdef::Vision_BigBox_Lift() &rArr; Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[177]"></a>Lift_Motor_Classdef::Lift_Negative_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef19Lift_Negative_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lift_Motor_Classdef::Lift_Negative_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
</UL>

<P><STRONG><a name="[148]"></a>Lift_Motor_Classdef::Lift_Take_BigBox_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef22Lift_Take_BigBox_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lift_Motor_Classdef::Lift_Take_BigBox_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[159]"></a>Lift_Motor_Classdef::Lift_Exchange_Box_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef23Lift_Exchange_Box_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lift_Motor_Classdef::Lift_Exchange_Box_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[16f]"></a>Lift_Motor_Classdef::Lift_Take_SmallBox_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef24Lift_Take_SmallBox_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lift_Motor_Classdef::Lift_Take_SmallBox_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
</UL>

<P><STRONG><a name="[146]"></a>Lift_Motor_Classdef::Lift_Vision_BigBox_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef24Lift_Vision_BigBox_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lift_Motor_Classdef::Lift_Vision_BigBox_Judge() &rArr; Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[1aa]"></a>Lift_Motor_Classdef::Lift_Life()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef9Lift_LifeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lift_Motor_Classdef::Lift_Life()
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::SetPIDParam(float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_POST_Reset()
</UL>

<P><STRONG><a name="[18d]"></a>Lift_Motor_Classdef::Lift_POST()</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef9Lift_POSTEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Lift_Motor_Classdef::Lift_POST() &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Classdef::PR_Updata()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 myConstrain&lang;float&rang;(T1, T1, T1)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Death()
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
</UL>

<P><STRONG><a name="[165]"></a>Lift_Motor_Classdef::Lift_Stop()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef9Lift_StopEv))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Protect_ALL()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[163]"></a>Lift_Motor_Classdef::None_Lift()</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef9None_LiftEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lift_Motor_Classdef::None_Lift()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 myConstrain&lang;float&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Lift_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[1a9]"></a>Lift_Motor_Classdef::Step_Lift(float, float, float)</STRONG> (Thumb, 438 bytes, Stack size 24 bytes, service_motor.o(i._ZN19Lift_Motor_Classdef9Step_LiftEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lift_Motor_Classdef::Step_Lift(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 myConstrain&lang;float&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Vision_BigBox_Lift()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Take_SmallBox_Lift()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Second_Stage_Lift()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Exchange_Box_Lift()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Third_Stage_Lift()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Take_BigBox_Lift()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::First_Stage_Lift()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Test_jl_Lift()
</UL>

<P><STRONG><a name="[185]"></a>Lift_Motor_Classdef::Lift_Motor_Classdef()</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, system_datapool.o(i._ZN19Lift_Motor_ClassdefC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::Motor_Classdef()
</UL>

<P><STRONG><a name="[205]"></a>Lift_Motor_Classdef::Lift_Motor_Classdef__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, system_datapool.o(i._ZN19Lift_Motor_ClassdefC1Ev), UNUSED)

<P><STRONG><a name="[150]"></a>Turn_Motor_Classdef::Turn_Death()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Turn_Motor_Classdef10Turn_DeathEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Turn_Motor_Classdef::Turn_Death()
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::SetPIDParam(float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Init_Part()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Init_All()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[120]"></a>Turn_Motor_Classdef::Turn_to_QR(unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, service_motor.o(i._ZN19Turn_Motor_Classdef10Turn_to_QREh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Turn_Motor_Classdef::Turn_to_QR(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 myConstrain&lang;float&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Turn_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[11e]"></a>Turn_Motor_Classdef::Turn_Life()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, service_motor.o(i._ZN19Turn_Motor_Classdef9Turn_LifeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Turn_Motor_Classdef::Turn_Life()
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::SetPIDParam(float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Control()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[199]"></a>Turn_Motor_Classdef::Turn_Stop()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, service_motor.o(i._ZN19Turn_Motor_Classdef9Turn_StopEv))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Protect_ALL()
</UL>

<P><STRONG><a name="[194]"></a>Extend_Motor_Classdef::Extend_POST()</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef11Extend_POSTEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Extend_Motor_Classdef::Extend_POST()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 myConstrain&lang;float&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Extend_Action()
</UL>

<P><STRONG><a name="[1ab]"></a>Extend_Motor_Classdef::Extend_Step(float, float, float)</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef11Extend_StepEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 myConstrain&lang;float&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Second_Stage_Extension()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::First_Stage_Extension()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::None_Extension()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Mini_Extension()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Third_Stage_Extension()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Negative_Extension()
</UL>

<P><STRONG><a name="[19b]"></a>Extend_Motor_Classdef::Extend_Stop()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef11Extend_StopEv))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Protect_ALL()
</UL>

<P><STRONG><a name="[1ac]"></a>Extend_Motor_Classdef::Extend_Judge(float)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef12Extend_JudgeEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Extend_Motor_Classdef::Extend_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Second_Judge()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_First_Judge()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_None_Judge()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Mini_Judge()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Negative_Judge()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Third_Judge()
</UL>

<P><STRONG><a name="[152]"></a>Extend_Motor_Classdef::Mini_Extension()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef14Mini_ExtensionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Extend_Motor_Classdef::Mini_Extension() &rArr; Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Extend_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[15e]"></a>Extend_Motor_Classdef::None_Extension()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef14None_ExtensionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Extend_Motor_Classdef::None_Extension() &rArr; Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Extend_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[155]"></a>Extend_Motor_Classdef::Extend_Mini_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef17Extend_Mini_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Extend_Motor_Classdef::Extend_Mini_Judge() &rArr; Extend_Motor_Classdef::Extend_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Extend_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[15f]"></a>Extend_Motor_Classdef::Extend_None_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef17Extend_None_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Extend_Motor_Classdef::Extend_None_Judge() &rArr; Extend_Motor_Classdef::Extend_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Extend_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[196]"></a>Extend_Motor_Classdef::Extend_First_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef18Extend_First_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Extend_Motor_Classdef::Extend_First_Judge() &rArr; Extend_Motor_Classdef::Extend_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Extend_Action()
</UL>

<P><STRONG><a name="[16c]"></a>Extend_Motor_Classdef::Extend_Third_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef18Extend_Third_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Extend_Motor_Classdef::Extend_Third_Judge() &rArr; Extend_Motor_Classdef::Extend_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
</UL>

<P><STRONG><a name="[15c]"></a>Extend_Motor_Classdef::Negative_Extension()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef18Negative_ExtensionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Extend_Motor_Classdef::Negative_Extension() &rArr; Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[14a]"></a>Extend_Motor_Classdef::Extend_Second_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef19Extend_Second_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Extend_Motor_Classdef::Extend_Second_Judge() &rArr; Extend_Motor_Classdef::Extend_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Extend_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[15d]"></a>Extend_Motor_Classdef::Extend_Negative_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef21Extend_Negative_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Extend_Motor_Classdef::Extend_Negative_Judge() &rArr; Extend_Motor_Classdef::Extend_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[195]"></a>Extend_Motor_Classdef::First_Stage_Extension()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef21First_Stage_ExtensionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Extend_Motor_Classdef::First_Stage_Extension() &rArr; Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Extend_Action()
</UL>

<P><STRONG><a name="[16a]"></a>Extend_Motor_Classdef::Third_Stage_Extension()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef21Third_Stage_ExtensionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Extend_Motor_Classdef::Third_Stage_Extension() &rArr; Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
</UL>

<P><STRONG><a name="[149]"></a>Extend_Motor_Classdef::Second_Stage_Extension()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Extend_Motor_Classdef22Second_Stage_ExtensionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Extend_Motor_Classdef::Second_Stage_Extension() &rArr; Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Step(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Extend_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[14d]"></a>Rotate_Motor_Classdef::Rotate_Hor()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef10Rotate_HorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Hor() &rArr; Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[14b]"></a>Rotate_Motor_Classdef::Rotate_Top()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef10Rotate_TopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Top() &rArr; Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[198]"></a>Rotate_Motor_Classdef::Rotate_POST()</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef11Rotate_POSTEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rotate_Motor_Classdef::Rotate_POST()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 myConstrain&lang;float&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
</UL>

<P><STRONG><a name="[16b]"></a>Rotate_Motor_Classdef::Rotate_Push()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef11Rotate_PushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Push() &rArr; Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
</UL>

<P><STRONG><a name="[1ad]"></a>Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef11Rotate_StepEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 myConstrain&lang;float&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Exchange()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Limit()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Hor()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_ExchangeAgain()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_SmallBox()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Push()
</UL>

<P><STRONG><a name="[19a]"></a>Rotate_Motor_Classdef::Rotate_Stop()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef11Rotate_StopEv))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Action_Protect_ALL()
</UL>

<P><STRONG><a name="[1ae]"></a>Rotate_Motor_Classdef::Rotate_Judge(float)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef12Rotate_JudgeEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Start_Judge()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Limit_Judge()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Top_Judge()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Hor_Judge()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_ExchangeAgain_Judge()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_SmallBox_Judge()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Topper_Judge()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Exchange_Judge()
</UL>

<P><STRONG><a name="[178]"></a>Rotate_Motor_Classdef::Rotate_Limit()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef12Rotate_LimitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Limit() &rArr; Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
</UL>

<P><STRONG><a name="[153]"></a>Rotate_Motor_Classdef::Rotate_Topper()</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef13Rotate_TopperEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Topper()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 myConstrain&lang;float&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[15a]"></a>Rotate_Motor_Classdef::Rotate_Exchange()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef15Rotate_ExchangeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Exchange() &rArr; Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[170]"></a>Rotate_Motor_Classdef::Rotate_SmallBox()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef15Rotate_SmallBoxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Rotate_Motor_Classdef::Rotate_SmallBox() &rArr; Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
</UL>

<P><STRONG><a name="[14e]"></a>Rotate_Motor_Classdef::Rotate_Hor_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef16Rotate_Hor_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Hor_Judge() &rArr; Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[14c]"></a>Rotate_Motor_Classdef::Rotate_Top_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef16Rotate_Top_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Top_Judge() &rArr; Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[160]"></a>Rotate_Motor_Classdef::Rotate_Back_Start()</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef17Rotate_Back_StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Back_Start()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 myConstrain&lang;float&rang;(T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[179]"></a>Rotate_Motor_Classdef::Rotate_Limit_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef18Rotate_Limit_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Limit_Judge() &rArr; Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
</UL>

<P><STRONG><a name="[161]"></a>Rotate_Motor_Classdef::Rotate_Start_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef18Rotate_Start_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Start_Judge() &rArr; Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_RobBigBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[154]"></a>Rotate_Motor_Classdef::Rotate_Topper_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef19Rotate_Topper_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Topper_Judge() &rArr; Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[173]"></a>Rotate_Motor_Classdef::Rotate_ExchangeAgain()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef20Rotate_ExchangeAgainEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Rotate_Motor_Classdef::Rotate_ExchangeAgain() &rArr; Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
</UL>

<P><STRONG><a name="[15b]"></a>Rotate_Motor_Classdef::Rotate_Exchange_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef21Rotate_Exchange_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rotate_Motor_Classdef::Rotate_Exchange_Judge() &rArr; Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Classdef::Do_Rotate_Action()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeGroundBox()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_REBigBox()
</UL>

<P><STRONG><a name="[171]"></a>Rotate_Motor_Classdef::Rotate_SmallBox_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef21Rotate_SmallBox_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rotate_Motor_Classdef::Rotate_SmallBox_Judge() &rArr; Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_TakeSmallBox()
</UL>

<P><STRONG><a name="[174]"></a>Rotate_Motor_Classdef::Rotate_ExchangeAgain_Judge()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, service_motor.o(i._ZN21Rotate_Motor_Classdef26Rotate_ExchangeAgain_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rotate_Motor_Classdef::Rotate_ExchangeAgain_Judge() &rArr; Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Judge(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Classdef::Auto_ExchangeAgain()
</UL>

<P><STRONG><a name="[184]"></a>Rotate_Motor_Classdef::Rotate_Motor_Classdef()</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, system_datapool.o(i._ZN21Rotate_Motor_ClassdefC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::Motor_Classdef()
</UL>

<P><STRONG><a name="[206]"></a>Rotate_Motor_Classdef::Rotate_Motor_Classdef__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, system_datapool.o(i._ZN21Rotate_Motor_ClassdefC1Ev), UNUSED)

<P><STRONG><a name="[17f]"></a>myPID::SetPIDParam(float, float, float, float, float)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, service_motor.o(i._ZN5myPID11SetPIDParamEfffff))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::MotorPIDInit()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Death()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_Life()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Life()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Death()
</UL>

<P><STRONG><a name="[182]"></a>myPID::Adjust()</STRONG> (Thumb, 616 bytes, Stack size 56 bytes, pid.o(i._ZN5myPID6AdjustEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = myPID::Adjust() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 _pid_Abs&lang;float&rang;(T1)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void _pid_Constrain&lang;float&rang;(T1*, T1, T1)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPIDTimer::UpdataTimeStamp()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::f(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::MotorPID_Control()
</UL>

<P><STRONG><a name="[7a]"></a>myPID::myPID()</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, service_motor.o(i._ZN5myPIDC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = myPID::myPID()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter::LowPassFilter(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> service_motor.o(i.__sti___17_Service_Motor_cpp_2a606558)
</UL>
<P><STRONG><a name="[207]"></a>myPID::myPID__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, service_motor.o(i._ZN5myPIDC1Ev), UNUSED)

<P><STRONG><a name="[64]"></a>myPID::~myPID()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, service_motor.o(i._ZN5myPIDD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> service_motor.o(i.<Func5>)
</UL>
<P><STRONG><a name="[208]"></a>myPID::~myPID__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, service_motor.o(i._ZN5myPIDD1Ev), UNUSED)

<P><STRONG><a name="[13a]"></a>MotorBase::update_angle(unsigned char*)</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, service_motor.o(i._ZN9MotorBase12update_angleEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorBase::update_angle(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_C620::update(unsigned char*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_C610::update(unsigned char*)
</UL>

<P><STRONG><a name="[81]"></a>MotorSpeed::getSpeed() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, service_motor.o(i._ZNK10MotorSpeed8getSpeedEv))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::Update_Motor(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> service_motor.o(.constdata__ZTV10MotorSpeed)
<LI> service_motor.o(.constdata__ZTV10Motor_C610)
<LI> service_motor.o(.constdata__ZTV10Motor_C620)
</UL>
<P><STRONG><a name="[180]"></a>Motor_C620::getGivenCurrent() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, service_motor.o(i._ZNK10Motor_C62015getGivenCurrentEv))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::Update_Motor(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[80]"></a>MotorBase::ENCODER_ANGLE_RATIO() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, service_motor.o(i._ZNK9MotorBase19ENCODER_ANGLE_RATIOEv))
<BR>[Address Reference Count : 4]<UL><LI> service_motor.o(.constdata__ZTV9MotorBase)
<LI> service_motor.o(.constdata__ZTV10MotorSpeed)
<LI> service_motor.o(.constdata__ZTV10Motor_C610)
<LI> service_motor.o(.constdata__ZTV10Motor_C620)
</UL>
<P><STRONG><a name="[1a7]"></a>std::abs(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, service_motor.o(i._ZSt3absf))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Judge(float)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Judge(float)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Judge(float)
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_Service_Motor_cpp_2a606558
</UL>

<P><STRONG><a name="[10f]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Com(void*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_POST(void*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_Com(void*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Selection(void*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Reset(void*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offline_Ctrl(void*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Ctrl(void*)
</UL>

<P><STRONG><a name="[209]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[20a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[20b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9d]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[61]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Resource_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[94]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[1bc]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>osThreadCreate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>osThreadTerminate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[1db]"></a>pvPortMalloc</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1d4]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1c2]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>

<P><STRONG><a name="[1e2]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freertos.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1d5]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[1d3]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1c4]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1c3]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>

<P><STRONG><a name="[1c6]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[1c8]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[1cf]"></a>vPortFree</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[1e4]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1de]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[113]"></a>vTaskDelayUntil</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, tasks.o(i.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Com(void*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_POST(void*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_Com(void*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Selection(void*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Reset(void*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offline_Ctrl(void*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Ctrl(void*)
</UL>

<P><STRONG><a name="[1c0]"></a>vTaskDelete</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[1e8]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[1da]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1e1]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1bd]"></a>vTaskStartScheduler</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[106]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Tasks_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[8c]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1e3]"></a>xPortStartScheduler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[103]"></a>xQueueGenericCreate</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Resource_Init
</UL>

<P><STRONG><a name="[1d1]"></a>xQueueGenericReset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[139]"></a>xQueueGenericSend</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIMsgSend()
</UL>

<P><STRONG><a name="[131]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_UART4_RxCpltCallback(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[137]"></a>xQueueReceive</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Com(void*)
</UL>

<P><STRONG><a name="[1e9]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[107]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Tasks_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1bf]"></a>xTaskCreateStatic</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[12d]"></a>xTaskGenericNotify</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, tasks.o(i.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Selection(void*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_POST()
</UL>

<P><STRONG><a name="[1e7]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[110]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Com(void*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_POST(void*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_Com(void*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Selection(void*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Reset(void*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offline_Ctrl(void*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Ctrl(void*)
</UL>

<P><STRONG><a name="[fe]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[12b]"></a>xTaskNotifyWait</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(i.xTaskNotifyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_POST(void*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offline_Ctrl(void*)
</UL>

<P><STRONG><a name="[1ce]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1d9]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[108]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Tasks_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1a8]"></a>T1 myConstrain&lang;float&rang;(T1, T1, T1)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, service_motor.o(t._Z11myConstrainIfET_S0_S0_S0_))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Back_Start()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_POST()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_POST()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::None_Lift()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_POST()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_Motor_Classdef::Turn_to_QR(unsigned char)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Lift_Adjust(unsigned char, unsigned char)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Step(float, float, float, float)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Extend_Motor_Classdef::Extend_Step(float, float, float)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Step_Lift(float, float, float)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rotate_Motor_Classdef::Rotate_Topper()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Motor_Classdef::Negative_Lift()
</UL>

<P><STRONG><a name="[1b6]"></a>void _pid_Constrain&lang;float&rang;(T1*, T1, T1)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pid.o(t._Z14_pid_ConstrainIfEvPT_S0_S0_))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::Adjust()
</UL>

<P><STRONG><a name="[1b3]"></a>T1 _pid_Abs&lang;float&rang;(T1)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pid.o(t._Z8_pid_AbsIfET_S0_))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPID::Adjust()
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[84]"></a>__sti___19_System_Datapool_cpp_618cb3c9</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_datapool.o(i.__sti___19_System_Datapool_cpp_618cb3c9))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___19_System_Datapool_cpp_618cb3c9 &rArr; Motor_Classdef::Motor_Classdef()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DR16_Classdef::DR16_Classdef()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Classdef::Motor_Classdef()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_datapool.o(.init_array)
</UL>
<P><STRONG><a name="[f0]"></a>MX_CAN1_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>MX_CAN2_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>MX_DMA_Init</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, main.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>MX_GPIO_Init</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>MX_TIM4_Init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, main.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>MX_UART4_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>&lang;Func5&rang;</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, service_motor.o(i.<Func5>))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = &lang;Func5&rang; &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> service_motor.o(i.__sti___17_Service_Motor_cpp_2a606558)
</UL>
<P><STRONG><a name="[85]"></a>__sti___17_Service_Motor_cpp_2a606558</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, service_motor.o(i.__sti___17_Service_Motor_cpp_2a606558))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___17_Service_Motor_cpp_2a606558 &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_C620::Motor_C620(unsigned char)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_C610::Motor_C610(unsigned char)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> service_motor.o(.init_array)
</UL>
<P><STRONG><a name="[1cb]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1cd]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1d0]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1d6]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1d7]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1d8]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c1]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1c5]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[1c9]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1ca]"></a>prvDeleteTCB</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[7d]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1d2]"></a>prvInitialiseNewTask</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[1c7]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1e0]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[1be]"></a>makeFreeRtosPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1dc]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1dd]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[7c]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[10d]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_uart.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[10e]"></a>Uart_Rx_Idle_Callback</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, drv_uart.o(i.Uart_Rx_Idle_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Uart_Rx_Idle_Callback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Receive_Handler
</UL>

<P><STRONG><a name="[10a]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_timer.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[c2]"></a>[local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_dma_c_c25f65ec13DMA_SetConfigEP19__DMA_HandleTypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[bf]"></a>[local to stm32f4xx_hal_dma_c]::DMA_CheckFifoParam(__DMA_HandleTypeDef*)</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_dma_c_c25f65ec18DMA_CheckFifoParamEP19__DMA_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[c0]"></a>[local to stm32f4xx_hal_dma_c]::DMA_CalcBaseAndBitshift(__DMA_HandleTypeDef*)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_dma_c_c25f65ec23DMA_CalcBaseAndBitshiftEP19__DMA_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[cc]"></a>[local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f4xx_hal_cortex_c_2992dbc018__NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[cb]"></a>[local to stm32f4xx_hal_cortex_c]::__NVIC_GetPriorityGrouping()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f4xx_hal_cortex_c_2992dbc026__NVIC_GetPriorityGroupingEv))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[d7]"></a>[local to stm32f4xx_hal_tim_c]::TIM_ITRx_SetConfig(TIM_TypeDef*, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_tim_c_a9d95b5218TIM_ITRx_SetConfigEP11TIM_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d6]"></a>[local to stm32f4xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_tim_c_a9d95b5224TIM_TI1_ConfigInputStageEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f4xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d8]"></a>[local to stm32f4xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_tim_c_a9d95b5224TIM_TI2_ConfigInputStageEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f4xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[68]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f13UART_DMAErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndTxTransfer(__UART_HandleTypeDef*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(__UART_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[ed]"></a>[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)</STRONG> (Thumb, 992 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f14UART_SetConfigEP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e6]"></a>[local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f15UART_Receive_ITEP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>[local to stm32f4xx_hal_uart_c]::UART_Transmit_IT(__UART_HandleTypeDef*)</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f16UART_Transmit_ITEP20__UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[67]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_DMARxHalfCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[e4]"></a>[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(__UART_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_EndRxTransferEP20__UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[e3]"></a>[local to stm32f4xx_hal_uart_c]::UART_EndTxTransfer(__UART_HandleTypeDef*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_EndTxTransferEP20__UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[66]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f19UART_DMAReceiveCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[ea]"></a>[local to stm32f4xx_hal_uart_c]::UART_EndTransmit_IT(__UART_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f19UART_EndTransmit_ITEP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_EndTransmit_IT(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f20UART_DMAAbortOnErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
